// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        curTex: { value: 1.0 }
        totalTex: {value : [4.0,1.0,4.0,0.0]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform Props{
    vec4 totalTex;
    float curTex;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    float numY = ceil(curTex / totalTex.z);
    float numX = ceil(curTex - totalTex.z * (numY - 1.0));
    vec2 uv = v_uv0;

    uv.x = v_uv0.x * 1.0 / totalTex.z + (numX - 1.0) * 1.0 / totalTex.z;
    uv.y = v_uv0.y * 1.0 / totalTex.y + (numY - 1.0) * 1.0 / totalTex.y;
    o = texture2D(texture, uv);
    o *= v_color;

    // ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
